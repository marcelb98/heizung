"""init

Revision ID: 932607c31832
Revises: 
Create Date: 2018-10-20 23:53:46.539167

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '932607c31832'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('relay',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('parent_rule', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('op', sa.Enum('and_', 'or_', name='operators'), nullable=False),
    sa.ForeignKeyConstraint(['parent_rule'], ['rule.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('address1w', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('passwort', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('condition_sensorCompare',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rule', sa.Integer(), nullable=True),
    sa.Column('relation', sa.Enum('lt', 'leq', 'eq', 'geq', 'gt', name='relations'), nullable=False),
    sa.Column('sensor1', sa.Integer(), nullable=True),
    sa.Column('sensor2', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['rule'], ['rule.id'], ),
    sa.ForeignKeyConstraint(['sensor1'], ['sensor.id'], ),
    sa.ForeignKeyConstraint(['sensor2'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('condition_sensorDiffCompare',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rule', sa.Integer(), nullable=True),
    sa.Column('relation', sa.Enum('lt', 'leq', 'eq', 'geq', 'gt', name='relations'), nullable=False),
    sa.Column('sensor1', sa.Integer(), nullable=True),
    sa.Column('sensor2', sa.Integer(), nullable=True),
    sa.Column('value', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['rule'], ['rule.id'], ),
    sa.ForeignKeyConstraint(['sensor1'], ['sensor.id'], ),
    sa.ForeignKeyConstraint(['sensor2'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('condition_valueCompare',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rule', sa.Integer(), nullable=True),
    sa.Column('relation', sa.Enum('lt', 'leq', 'eq', 'geq', 'gt', name='relations'), nullable=False),
    sa.Column('sensor', sa.Integer(), nullable=True),
    sa.Column('value', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['rule'], ['rule.id'], ),
    sa.ForeignKeyConstraint(['sensor'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('relayRules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('relay', sa.Integer(), nullable=True),
    sa.Column('rule', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['relay'], ['relay.id'], ),
    sa.ForeignKeyConstraint(['rule'], ['rule.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensorValue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sensorValue')
    op.drop_table('relayRules')
    op.drop_table('condition_valueCompare')
    op.drop_table('condition_sensorDiffCompare')
    op.drop_table('condition_sensorCompare')
    op.drop_table('user')
    op.drop_table('sensor')
    op.drop_table('rule')
    op.drop_table('relay')
    # ### end Alembic commands ###
